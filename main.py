# main.py

from payload_generation import PayloadGenerator
from resource_enumeration import ResourceEnumerator
from persistence import PersistenceManager

def main():
    target_cloud_provider = input("Enter the target cloud provider (AWS/Azure/GCP): ")

    payload_generator = PayloadGenerator(target_cloud_provider)
    resource_enumerator = ResourceEnumerator(target_cloud_provider)
    persistence_manager = PersistenceManager(target_cloud_provider)

    print("Cloud-Based Post-Exploitation Framework")
    print("--------------------------------------")

    while True:
        print("\nChoose an action:")
        print("1. Generate Custom Payload")
        print("2. Enumerate Cloud Resources")
        print("3. Establish Persistence")
        print("4. Quit")

        choice = input("Enter your choice: ")

        if choice == "1":
            vulnerability_type = input("Enter the vulnerability type: ")
            payload = payload_generator.generate_payload(vulnerability_type)
            if payload:
                print("Generated Payload:")
                print(payload)
            else:
                print("Unsupported vulnerability or cloud provider")

        elif choice == "2":
            resources = resource_enumerator.enumerate_resources()
            print("Enumerated Cloud Resources:")
            for resource in resources:
                print(resource)

            vulnerable_resources = resource_enumerator.identify_vulnerable_resources(resources)
            print("\nPotential Vulnerable Resources:")
            for resource in vulnerable_resources:
                print(resource)

        elif choice == "3":
            persistence_manager.establish_persistence()
            persistence_manager.maintain_persistence()
            print("Persistence established and maintained")

        elif choice == "4":
            break

        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()
